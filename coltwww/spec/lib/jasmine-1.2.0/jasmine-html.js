
                var isNode =
                    typeof global !== "undefined" &&
                    {}.toString.call(global) == '[object global]';
                if (isNode) {
                    require("../../../live.js");
                }
        LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js0", "(function(type, attrs, childrenVarArgs) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[0]: function(type, attrs, childrenVarArgs)\"); try {\n                  var el = document.createElement(type);\n  \n                                    var _colt0 = \"_colt0_\" + Date.now();\n                                  for (var i = 2; i < arguments.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt0);\n                                      var child = arguments[i];\n      if (typeof child === \'string\') \n      {\n        el.appendChild(document.createTextNode(child));\n      } else {\n        if (child) \n        {\n          el.appendChild(child);\n        }\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  \n                                    var _colt1 = \"_colt1_\" + Date.now();\n                                  for (var attr in attrs) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt1);\n                                      if (attr == \"className\") \n      {\n        el[attr] = attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  return el;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[0]: function(type, attrs, childrenVarArgs) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[0]: function(type, attrs, childrenVarArgs)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js1", "(function(child) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[1]: function(child)\"); try {\n                  var results = child.results();\n  var status = results.passed() ? \'passed\' : \'failed\';\n  if (results.skipped) \n  {\n    status = \'skipped\';\n  }\n  return status;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[1]: function(child) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[1]: function(child)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js2", "(function(child, childElement) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[2]: function(child, childElement)\"); try {\n                  var parentDiv = this.dom.summary;\n  var parentSuite = (typeof child.parentSuite == \'undefined\') ? \'suite\' : \'parentSuite\';\n  var parent = child[parentSuite];\n  if (parent) \n  {\n    if (typeof this.views.suites[parent.id] == \'undefined\') \n    {\n      this.views.suites[parent.id] = new jasmine.HtmlReporter.SuiteView(parent, this.dom, this.views);\n    }\n    parentDiv = this.views.suites[parent.id].element;\n  }\n  parentDiv.appendChild(childElement);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[2]: function(child, childElement) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[2]: function(child, childElement)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js3", "(function(ctor) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[3]: function(ctor)\"); try {\n                  \n                                    var _colt2 = \"_colt2_\" + Date.now();\n                                  for (var fn in jasmine.HtmlReporterHelpers) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt2);\n                                      ctor.prototype[fn] = jasmine.HtmlReporterHelpers[fn];\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[3]: function(ctor) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[3]: function(ctor)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js4", "(function(_doc) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[4]: function(_doc)\"); try {\n                  var self = this;\n  var doc = _doc || window.document;\n  var reporterView;\n  var dom = {};\n  self.logRunningSpecs = false;\n  self.reportRunnerStarting = function(runner) {\n  \n                        var _colt11 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js5_\" + __coltScope)\n                        if (_colt11 == null) {\n                            try {\n                                _colt11 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js5\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[5]: function(runner) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js5_\" + __coltScope, _colt11)\n                        }\n                        return _colt11.apply(this, arguments)\n            };\n  self.reportRunnerResults = function(runner) {\n  \n                        var _colt12 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js6_\" + __coltScope)\n                        if (_colt12 == null) {\n                            try {\n                                _colt12 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js6\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[6]: function(runner) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js6_\" + __coltScope, _colt12)\n                        }\n                        return _colt12.apply(this, arguments)\n            };\n  self.reportSuiteResults = function(suite) {\n  \n                        var _colt13 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js7_\" + __coltScope)\n                        if (_colt13 == null) {\n                            try {\n                                _colt13 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js7\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[7]: function(suite) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js7_\" + __coltScope, _colt13)\n                        }\n                        return _colt13.apply(this, arguments)\n            };\n  self.reportSpecStarting = function(spec) {\n  \n                        var _colt14 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js8_\" + __coltScope)\n                        if (_colt14 == null) {\n                            try {\n                                _colt14 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js8\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[8]: function(spec) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js8_\" + __coltScope, _colt14)\n                        }\n                        return _colt14.apply(this, arguments)\n            };\n  self.reportSpecResults = function(spec) {\n  \n                        var _colt15 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js9_\" + __coltScope)\n                        if (_colt15 == null) {\n                            try {\n                                _colt15 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js9\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[9]: function(spec) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js9_\" + __coltScope, _colt15)\n                        }\n                        return _colt15.apply(this, arguments)\n            };\n  self.log = function() {\n  \n                        var _colt16 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js10_\" + __coltScope)\n                        if (_colt16 == null) {\n                            try {\n                                _colt16 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js10\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[10]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js10_\" + __coltScope, _colt16)\n                        }\n                        return _colt16.apply(this, arguments)\n            };\n  self.specFilter = function(spec) {\n  \n                        var _colt17 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js11_\" + __coltScope)\n                        if (_colt17 == null) {\n                            try {\n                                _colt17 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js11\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[11]: function(spec) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js11_\" + __coltScope, _colt17)\n                        }\n                        return _colt17.apply(this, arguments)\n            };\n  return self;\n  function focusedSpecName() {\n    \n                        var _colt18 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js12_\" + __coltScope)\n                        if (_colt18 == null) {\n                            try {\n                                _colt18 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js12\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[12]: function focusedSpecName() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js12_\" + __coltScope, _colt18)\n                        }\n                        return _colt18.apply(this, arguments)\n              }\n  function createReporterDom(version) {\n    \n                        var _colt1a = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js14_\" + __coltScope)\n                        if (_colt1a == null) {\n                            try {\n                                _colt1a = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js14\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[14]: function createReporterDom(version) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js14_\" + __coltScope, _colt1a)\n                        }\n                        return _colt1a.apply(this, arguments)\n              }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[4]: function(_doc) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[4]: function(_doc)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js5", "(function(runner) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[5]: function(runner)\"); try {\n                  var specs = runner.specs() || [];\n  if (specs.length == 0) \n  {\n    return;\n  }\n  createReporterDom(runner.env.versionString());\n  doc.body.appendChild(dom.reporter);\n  reporterView = new jasmine.HtmlReporter.ReporterView(dom);\n  reporterView.addSpecs(specs, self.specFilter);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[5]: function(runner) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[5]: function(runner)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js6", "(function(runner) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[6]: function(runner)\"); try {\n                  reporterView && reporterView.complete();\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[6]: function(runner) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[6]: function(runner)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js7", "(function(suite) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[7]: function(suite)\"); try {\n                  reporterView.suiteComplete(suite);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[7]: function(suite) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[7]: function(suite)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js8", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[8]: function(spec)\"); try {\n                  if (self.logRunningSpecs) \n  {\n    self.log(\'>> Jasmine Running \' + spec.suite.description + \' \' + spec.description + \'...\');\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[8]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[8]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js9", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[9]: function(spec)\"); try {\n                  reporterView.specComplete(spec);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[9]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[9]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js10", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[10]: function()\"); try {\n                  var console = jasmine.getGlobal().console;\n  if (console && console.log) \n  {\n    if (console.log.apply) \n    {\n      console.log.apply(console, arguments);\n    } else {\n      console.log(arguments);\n    }\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[10]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[10]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js11", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[11]: function(spec)\"); try {\n                  if (!focusedSpecName()) \n  {\n    return true;\n  }\n  return spec.getFullName().indexOf(focusedSpecName()) === 0;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[11]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[11]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js12", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[12]: function focusedSpecName()\"); try {\n                  var specName;\n  (function memoizeFocusedSpec() {\n  \n                        var _colt19 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js13_\" + __coltScope)\n                        if (_colt19 == null) {\n                            try {\n                                _colt19 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js13\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[13]: function memoizeFocusedSpec() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js13_\" + __coltScope, _colt19)\n                        }\n                        return _colt19.apply(this, arguments)\n            })();\n  return specName;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[12]: function focusedSpecName() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[12]: function focusedSpecName()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js13", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[13]: function memoizeFocusedSpec()\"); try {\n                  if (specName) \n  {\n    return;\n  }\n  var paramMap = [];\n  var params = doc.location.search.substring(1).split(\'&\');\n  \n                                    var _colt3 = \"_colt3_\" + Date.now();\n                                  for (var i = 0; i < params.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt3);\n                                      var p = params[i].split(\'=\');\n      paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  specName = paramMap.spec;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[13]: function memoizeFocusedSpec() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[13]: function memoizeFocusedSpec()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js14", "(function(version) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[14]: function createReporterDom(version)\"); try {\n                  dom.reporter = self.createDom(\'div\', {id: \'HTMLReporter\', className: \'jasmine_reporter\'}, dom.banner = self.createDom(\'div\', {className: \'banner\'}, self.createDom(\'span\', {className: \'title\'}, \"Jasmine \"), self.createDom(\'span\', {className: \'version\'}, version)), dom.symbolSummary = self.createDom(\'ul\', {className: \'symbolSummary\'}), dom.alert = self.createDom(\'div\', {className: \'alert\'}), dom.results = self.createDom(\'div\', {className: \'results\'}, dom.summary = self.createDom(\'div\', {className: \'summary\'}), dom.details = self.createDom(\'div\', {id: \'details\'})));\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[14]: function createReporterDom(version) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[14]: function createReporterDom(version)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js15", "(function(dom) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[15]: function(dom)\"); try {\n                  this.startedAt = new Date();\n  this.runningSpecCount = 0;\n  this.completeSpecCount = 0;\n  this.passedCount = 0;\n  this.failedCount = 0;\n  this.skippedCount = 0;\n  this.createResultsMenu = function() {\n  \n                        var _colt1c = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js16_\" + __coltScope)\n                        if (_colt1c == null) {\n                            try {\n                                _colt1c = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js16\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[16]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js16_\" + __coltScope, _colt1c)\n                        }\n                        return _colt1c.apply(this, arguments)\n            };\n  this.addSpecs = function(specs, specFilter) {\n  \n                        var _colt1f = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js19_\" + __coltScope)\n                        if (_colt1f == null) {\n                            try {\n                                _colt1f = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js19\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[19]: function(specs, specFilter) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js19_\" + __coltScope, _colt1f)\n                        }\n                        return _colt1f.apply(this, arguments)\n            };\n  this.specComplete = function(spec) {\n  \n                        var _colt20 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js20_\" + __coltScope)\n                        if (_colt20 == null) {\n                            try {\n                                _colt20 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js20\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[20]: function(spec) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js20_\" + __coltScope, _colt20)\n                        }\n                        return _colt20.apply(this, arguments)\n            };\n  this.suiteComplete = function(suite) {\n  \n                        var _colt21 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js21_\" + __coltScope)\n                        if (_colt21 == null) {\n                            try {\n                                _colt21 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js21\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[21]: function(suite) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js21_\" + __coltScope, _colt21)\n                        }\n                        return _colt21.apply(this, arguments)\n            };\n  this.refresh = function() {\n  \n                        var _colt22 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js22_\" + __coltScope)\n                        if (_colt22 == null) {\n                            try {\n                                _colt22 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js22\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[22]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js22_\" + __coltScope, _colt22)\n                        }\n                        return _colt22.apply(this, arguments)\n            };\n  this.complete = function() {\n  \n                        var _colt23 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js23_\" + __coltScope)\n                        if (_colt23 == null) {\n                            try {\n                                _colt23 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js23\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[23]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js23_\" + __coltScope, _colt23)\n                        }\n                        return _colt23.apply(this, arguments)\n            };\n  return this;\n  function showDetails() {\n    \n                        var _colt24 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js24_\" + __coltScope)\n                        if (_colt24 == null) {\n                            try {\n                                _colt24 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js24\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[24]: function showDetails() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js24_\" + __coltScope, _colt24)\n                        }\n                        return _colt24.apply(this, arguments)\n              }\n  function isUndefined(obj) {\n    \n                        var _colt25 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js25_\" + __coltScope)\n                        if (_colt25 == null) {\n                            try {\n                                _colt25 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js25\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[25]: function isUndefined(obj) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js25_\" + __coltScope, _colt25)\n                        }\n                        return _colt25.apply(this, arguments)\n              }\n  function isDefined(obj) {\n    \n                        var _colt26 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js26_\" + __coltScope)\n                        if (_colt26 == null) {\n                            try {\n                                _colt26 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js26\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[26]: function isDefined(obj) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js26_\" + __coltScope, _colt26)\n                        }\n                        return _colt26.apply(this, arguments)\n              }\n  function specPluralizedFor(count) {\n    \n                        var _colt27 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js27_\" + __coltScope)\n                        if (_colt27 == null) {\n                            try {\n                                _colt27 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js27\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[27]: function specPluralizedFor(count) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js27_\" + __coltScope, _colt27)\n                        }\n                        return _colt27.apply(this, arguments)\n              }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[15]: function(dom) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[15]: function(dom)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js16", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[16]: function()\"); try {\n                  this.resultsMenu = this.createDom(\'span\', {className: \'resultsMenu bar\'}, this.summaryMenuItem = this.createDom(\'a\', {className: \'summaryMenuItem\', href: \"#\"}, \'0 specs\'), \' | \', this.detailsMenuItem = this.createDom(\'a\', {className: \'detailsMenuItem\', href: \"#\"}, \'0 failing\'));\n  this.summaryMenuItem.onclick = function() {\n  \n                        var _colt1d = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js17_\" + __coltScope)\n                        if (_colt1d == null) {\n                            try {\n                                _colt1d = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js17\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[17]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js17_\" + __coltScope, _colt1d)\n                        }\n                        return _colt1d.apply(this, arguments)\n            };\n  this.detailsMenuItem.onclick = function() {\n  \n                        var _colt1e = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js18_\" + __coltScope)\n                        if (_colt1e == null) {\n                            try {\n                                _colt1e = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js18\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[18]: function() execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js18_\" + __coltScope, _colt1e)\n                        }\n                        return _colt1e.apply(this, arguments)\n            };\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[16]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[16]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js17", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[17]: function()\"); try {\n                  dom.reporter.className = dom.reporter.className.replace(\/ showDetails\/g, \'\');\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[17]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[17]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js18", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[18]: function()\"); try {\n                  showDetails();\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[18]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[18]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js19", "(function(specs, specFilter) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[19]: function(specs, specFilter)\"); try {\n                  this.totalSpecCount = specs.length;\n  this.views = {specs: {}, suites: {}};\n  \n                                    var _colt4 = \"_colt4_\" + Date.now();\n                                  for (var i = 0; i < specs.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt4);\n                                      var spec = specs[i];\n      this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom, this.views);\n      if (specFilter(spec)) \n      {\n        this.runningSpecCount++;\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[19]: function(specs, specFilter) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[19]: function(specs, specFilter)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js20", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[20]: function(spec)\"); try {\n                  this.completeSpecCount++;\n  if (isUndefined(this.views.specs[spec.id])) \n  {\n    this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom);\n  }\n  var specView = this.views.specs[spec.id];\n  switch (specView.status()) {\n    case \'passed\':\n      this.passedCount++;\n      break;\n    case \'failed\':\n      this.failedCount++;\n      break;\n    case \'skipped\':\n      this.skippedCount++;\n      break;\n  }\n  specView.refresh();\n  this.refresh();\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[20]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[20]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js21", "(function(suite) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[21]: function(suite)\"); try {\n                  var suiteView = this.views.suites[suite.id];\n  if (isUndefined(suiteView)) \n  {\n    return;\n  }\n  suiteView.refresh();\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[21]: function(suite) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[21]: function(suite)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js22", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[22]: function()\"); try {\n                  if (isUndefined(this.resultsMenu)) \n  {\n    this.createResultsMenu();\n  }\n  if (isUndefined(this.runningAlert)) \n  {\n    this.runningAlert = this.createDom(\'a\', {href: \"?\", className: \"runningAlert bar\"});\n    dom.alert.appendChild(this.runningAlert);\n  }\n  this.runningAlert.innerHTML = \"Running \" + this.completeSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount);\n  if (isUndefined(this.skippedAlert)) \n  {\n    this.skippedAlert = this.createDom(\'a\', {href: \"?\", className: \"skippedAlert bar\"});\n  }\n  this.skippedAlert.innerHTML = \"Skipping \" + this.skippedCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\";\n  if (this.skippedCount === 1 && isDefined(dom.alert)) \n  {\n    dom.alert.appendChild(this.skippedAlert);\n  }\n  if (isUndefined(this.passedAlert)) \n  {\n    this.passedAlert = this.createDom(\'span\', {href: \"?\", className: \"passingAlert bar\"});\n  }\n  this.passedAlert.innerHTML = \"Passing \" + specPluralizedFor(this.passedCount);\n  if (isUndefined(this.failedAlert)) \n  {\n    this.failedAlert = this.createDom(\'span\', {href: \"?\", className: \"failingAlert bar\"});\n  }\n  this.failedAlert.innerHTML = \"Failing \" + specPluralizedFor(this.failedCount);\n  if (this.failedCount === 1 && isDefined(dom.alert)) \n  {\n    dom.alert.appendChild(this.failedAlert);\n    dom.alert.appendChild(this.resultsMenu);\n  }\n  this.summaryMenuItem.innerHTML = \"\" + specPluralizedFor(this.runningSpecCount);\n  this.detailsMenuItem.innerHTML = \"\" + this.failedCount + \" failing\";\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[22]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[22]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js23", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[23]: function()\"); try {\n                  dom.alert.removeChild(this.runningAlert);\n  this.skippedAlert.innerHTML = \"Ran \" + this.runningSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\";\n  if (this.failedCount === 0) \n  {\n    dom.alert.appendChild(this.createDom(\'span\', {className: \'passingAlert bar\'}, \"Passing \" + specPluralizedFor(this.passedCount)));\n  } else {\n    showDetails();\n  }\n  dom.banner.appendChild(this.createDom(\'span\', {className: \'duration\'}, \"finished in \" + ((new Date().getTime() - this.startedAt.getTime()) \/ 1000) + \"s\"));\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[23]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[23]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js24", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[24]: function showDetails()\"); try {\n                  if (dom.reporter.className.search(\/showDetails\/) === -1) \n  {\n    dom.reporter.className += \" showDetails\";\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[24]: function showDetails() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[24]: function showDetails()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js25", "(function(obj) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[25]: function isUndefined(obj)\"); try {\n                  return typeof obj === \'undefined\';\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[25]: function isUndefined(obj) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[25]: function isUndefined(obj)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js26", "(function(obj) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[26]: function isDefined(obj)\"); try {\n                  return !isUndefined(obj);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[26]: function isDefined(obj) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[26]: function isDefined(obj)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js27", "(function(count) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[27]: function specPluralizedFor(count)\"); try {\n                  var str = count + \" spec\";\n  if (count > 1) \n  {\n    str += \"s\";\n  }\n  return str;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[27]: function specPluralizedFor(count) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[27]: function specPluralizedFor(count)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js28", "(function(spec, dom, views) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[28]: function(spec, dom, views)\"); try {\n                  this.spec = spec;\n  this.dom = dom;\n  this.views = views;\n  this.symbol = this.createDom(\'li\', {className: \'pending\'});\n  this.dom.symbolSummary.appendChild(this.symbol);\n  this.summary = this.createDom(\'div\', {className: \'specSummary\'}, this.createDom(\'a\', {className: \'description\', href: \'?spec=\' + encodeURIComponent(this.spec.getFullName()), title: this.spec.getFullName()}, this.spec.description));\n  this.detail = this.createDom(\'div\', {className: \'specDetail\'}, this.createDom(\'a\', {className: \'description\', href: \'?spec=\' + encodeURIComponent(this.spec.getFullName()), title: this.spec.getFullName()}, this.spec.getFullName()));\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[28]: function(spec, dom, views) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[28]: function(spec, dom, views)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js29", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[29]: function()\"); try {\n                  return this.getSpecStatus(this.spec);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[29]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[29]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js30", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[30]: function()\"); try {\n                  this.symbol.className = this.status();\n  switch (this.status()) {\n    case \'skipped\':\n      break;\n    case \'passed\':\n      this.appendSummaryToSuiteDiv();\n      break;\n    case \'failed\':\n      this.appendSummaryToSuiteDiv();\n      this.appendFailureDetail();\n      break;\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[30]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[30]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js31", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[31]: function()\"); try {\n                  this.summary.className += \' \' + this.status();\n  this.appendToSummary(this.spec, this.summary);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[31]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[31]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js32", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[32]: function()\"); try {\n                  this.detail.className += \' \' + this.status();\n  var resultItems = this.spec.results().getItems();\n  var messagesDiv = this.createDom(\'div\', {className: \'messages\'});\n  \n                                    var _colt5 = \"_colt5_\" + Date.now();\n                                  for (var i = 0; i < resultItems.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt5);\n                                      var result = resultItems[i];\n      if (result.type == \'log\') \n      {\n        messagesDiv.appendChild(this.createDom(\'div\', {className: \'resultMessage log\'}, result.toString()));\n      } else if (result.type == \'expect\' && result.passed && !result.passed()) \n      {\n        messagesDiv.appendChild(this.createDom(\'div\', {className: \'resultMessage fail\'}, result.message));\n        if (result.trace.stack) \n        {\n          messagesDiv.appendChild(this.createDom(\'div\', {className: \'stackTrace\'}, result.trace.stack));\n        }\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  if (messagesDiv.childNodes.length > 0) \n  {\n    this.detail.appendChild(messagesDiv);\n    this.dom.details.appendChild(this.detail);\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[32]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[32]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js33", "(function(suite, dom, views) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[33]: function(suite, dom, views)\"); try {\n                  this.suite = suite;\n  this.dom = dom;\n  this.views = views;\n  this.element = this.createDom(\'div\', {className: \'suite\'}, this.createDom(\'a\', {className: \'description\', href: \'?spec=\' + encodeURIComponent(this.suite.getFullName())}, this.suite.description));\n  this.appendToSummary(this.suite, this.element);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[33]: function(suite, dom, views) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[33]: function(suite, dom, views)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js34", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[34]: function()\"); try {\n                  return this.getSpecStatus(this.suite);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[34]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[34]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js35", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[35]: function()\"); try {\n                  this.element.className += \" \" + this.status();\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[35]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[35]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js36", "(function(doc) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[36]: function(doc)\"); try {\n                  this.document = doc || document;\n  this.suiteDivs = {};\n  this.logRunningSpecs = false;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[36]: function(doc) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[36]: function(doc)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js37", "(function(type, attrs, childrenVarArgs) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[37]: function(type, attrs, childrenVarArgs)\"); try {\n                  var el = document.createElement(type);\n  \n                                    var _colt6 = \"_colt6_\" + Date.now();\n                                  for (var i = 2; i < arguments.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt6);\n                                      var child = arguments[i];\n      if (typeof child === \'string\') \n      {\n        el.appendChild(document.createTextNode(child));\n      } else {\n        if (child) \n        {\n          el.appendChild(child);\n        }\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  \n                                    var _colt7 = \"_colt7_\" + Date.now();\n                                  for (var attr in attrs) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt7);\n                                      if (attr == \"className\") \n      {\n        el[attr] = attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  return el;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[37]: function(type, attrs, childrenVarArgs) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[37]: function(type, attrs, childrenVarArgs)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js38", "(function(runner) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[38]: function(runner)\"); try {\n                  var showPassed, showSkipped;\n  this.outerDiv = this.createDom(\'div\', {id: \'TrivialReporter\', className: \'jasmine_reporter\'}, this.createDom(\'div\', {className: \'banner\'}, this.createDom(\'div\', {className: \'logo\'}, this.createDom(\'span\', {className: \'title\'}, \"Jasmine\"), this.createDom(\'span\', {className: \'version\'}, runner.env.versionString())), this.createDom(\'div\', {className: \'options\'}, \"Show \", showPassed = this.createDom(\'input\', {id: \"__jasmine_TrivialReporter_showPassed__\", type: \'checkbox\'}), this.createDom(\'label\', {\"for\": \"__jasmine_TrivialReporter_showPassed__\"}, \" passed \"), showSkipped = this.createDom(\'input\', {id: \"__jasmine_TrivialReporter_showSkipped__\", type: \'checkbox\'}), this.createDom(\'label\', {\"for\": \"__jasmine_TrivialReporter_showSkipped__\"}, \" skipped\"))), this.runnerDiv = this.createDom(\'div\', {className: \'runner running\'}, this.createDom(\'a\', {className: \'run_spec\', href: \'?\'}, \"run all\"), this.runnerMessageSpan = this.createDom(\'span\', {}, \"Running...\"), this.finishedAtSpan = this.createDom(\'span\', {className: \'finished-at\'}, \"\")));\n  this.document.body.appendChild(this.outerDiv);\n  var suites = runner.suites();\n  \n                                    var _colt8 = \"_colt8_\" + Date.now();\n                                  for (var i = 0; i < suites.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt8);\n                                      var suite = suites[i];\n      var suiteDiv = this.createDom(\'div\', {className: \'suite\'}, this.createDom(\'a\', {className: \'run_spec\', href: \'?spec=\' + encodeURIComponent(suite.getFullName())}, \"run\"), this.createDom(\'a\', {className: \'description\', href: \'?spec=\' + encodeURIComponent(suite.getFullName())}, suite.description));\n      this.suiteDivs[suite.id] = suiteDiv;\n      var parentDiv = this.outerDiv;\n      if (suite.parentSuite) \n      {\n        parentDiv = this.suiteDivs[suite.parentSuite.id];\n      }\n      parentDiv.appendChild(suiteDiv);\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  this.startedAt = new Date();\n  var self = this;\n  showPassed.onclick = function(evt) {\n  \n                        var _colt33 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js39_\" + __coltScope)\n                        if (_colt33 == null) {\n                            try {\n                                _colt33 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js39\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[39]: function(evt) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js39_\" + __coltScope, _colt33)\n                        }\n                        return _colt33.apply(this, arguments)\n            };\n  showSkipped.onclick = function(evt) {\n  \n                        var _colt34 = LiveCodeRegistry.getInstance().getCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js40_\" + __coltScope)\n                        if (_colt34 == null) {\n                            try {\n                                _colt34 = eval(LiveCodeRegistry.getInstance().getMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js40\"));\n                            } catch (e) {\n                                LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[40]: function(evt) execute error: \" + e.message, e);\n                                return;\n                            }\n                            LiveCodeRegistry.getInstance().putCachedMethod(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js40_\" + __coltScope, _colt34)\n                        }\n                        return _colt34.apply(this, arguments)\n            };\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[38]: function(runner) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[38]: function(runner)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js39", "(function(evt) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[39]: function(evt)\"); try {\n                  if (showPassed.checked) \n  {\n    self.outerDiv.className += \' show-passed\';\n  } else {\n    self.outerDiv.className = self.outerDiv.className.replace(\/ show-passed\/, \'\');\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[39]: function(evt) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[39]: function(evt)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js40", "(function(evt) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[40]: function(evt)\"); try {\n                  if (showSkipped.checked) \n  {\n    self.outerDiv.className += \' show-skipped\';\n  } else {\n    self.outerDiv.className = self.outerDiv.className.replace(\/ show-skipped\/, \'\');\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[40]: function(evt) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[40]: function(evt)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js41", "(function(runner) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[41]: function(runner)\"); try {\n                  var results = runner.results();\n  var className = (results.failedCount > 0) ? \"runner failed\" : \"runner passed\";\n  this.runnerDiv.setAttribute(\"class\", className);\n  this.runnerDiv.setAttribute(\"className\", className);\n  var specs = runner.specs();\n  var specCount = 0;\n  \n                                    var _colt9 = \"_colt9_\" + Date.now();\n                                  for (var i = 0; i < specs.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colt9);\n                                      if (this.specFilter(specs[i])) \n      {\n        specCount++;\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  var message = \"\" + specCount + \" spec\" + (specCount == 1 ? \"\" : \"s\") + \", \" + results.failedCount + \" failure\" + ((results.failedCount == 1) ? \"\" : \"s\");\n  message += \" in \" + ((new Date().getTime() - this.startedAt.getTime()) \/ 1000) + \"s\";\n  this.runnerMessageSpan.replaceChild(this.createDom(\'a\', {className: \'description\', href: \'?\'}, message), this.runnerMessageSpan.firstChild);\n  this.finishedAtSpan.appendChild(document.createTextNode(\"Finished at \" + new Date().toString()));\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[41]: function(runner) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[41]: function(runner)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js42", "(function(suite) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[42]: function(suite)\"); try {\n                  var results = suite.results();\n  var status = results.passed() ? \'passed\' : \'failed\';\n  if (results.totalCount === 0) \n  {\n    status = \'skipped\';\n  }\n  this.suiteDivs[suite.id].className += \" \" + status;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[42]: function(suite) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[42]: function(suite)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js43", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[43]: function(spec)\"); try {\n                  if (this.logRunningSpecs) \n  {\n    this.log(\'>> Jasmine Running \' + spec.suite.description + \' \' + spec.description + \'...\');\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[43]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[43]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js44", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[44]: function(spec)\"); try {\n                  var results = spec.results();\n  var status = results.passed() ? \'passed\' : \'failed\';\n  if (results.skipped) \n  {\n    status = \'skipped\';\n  }\n  var specDiv = this.createDom(\'div\', {className: \'spec \' + status}, this.createDom(\'a\', {className: \'run_spec\', href: \'?spec=\' + encodeURIComponent(spec.getFullName())}, \"run\"), this.createDom(\'a\', {className: \'description\', href: \'?spec=\' + encodeURIComponent(spec.getFullName()), title: spec.getFullName()}, spec.description));\n  var resultItems = results.getItems();\n  var messagesDiv = this.createDom(\'div\', {className: \'messages\'});\n  \n                                    var _colta = \"_colta_\" + Date.now();\n                                  for (var i = 0; i < resultItems.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_colta);\n                                      var result = resultItems[i];\n      if (result.type == \'log\') \n      {\n        messagesDiv.appendChild(this.createDom(\'div\', {className: \'resultMessage log\'}, result.toString()));\n      } else if (result.type == \'expect\' && result.passed && !result.passed()) \n      {\n        messagesDiv.appendChild(this.createDom(\'div\', {className: \'resultMessage fail\'}, result.message));\n        if (result.trace.stack) \n        {\n          messagesDiv.appendChild(this.createDom(\'div\', {className: \'stackTrace\'}, result.trace.stack));\n        }\n      }\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  if (messagesDiv.childNodes.length > 0) \n  {\n    specDiv.appendChild(messagesDiv);\n  }\n  this.suiteDivs[spec.suite.id].appendChild(specDiv);\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[44]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[44]: function(spec)\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js45", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[45]: function()\"); try {\n                  var console = jasmine.getGlobal().console;\n  if (console && console.log) \n  {\n    if (console.log.apply) \n    {\n      console.log.apply(console, arguments);\n    } else {\n      console.log(arguments);\n    }\n  }\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[45]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[45]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js46", "(function() {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[46]: function()\"); try {\n                  return this.document.location;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[46]: function() execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[46]: function()\");\n                    }\n                })")
LiveCodeRegistry.getInstance().putMethod("spec/lib/jasmine-1.2.0/jasmine-html.js47", "(function(spec) {\n  \n                    var __coltScope = LiveCodeRegistry.getInstance().getScope();\n                    LiveCodingCodeFlowUtil.checkRecursion(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[47]: function(spec)\"); try {\n                  var paramMap = {};\n  var params = this.getLocation().search.substring(1).split(\'&\');\n  \n                                    var _coltb = \"_coltb_\" + Date.now();\n                                  for (var i = 0; i < params.length; i++) \n    {\n      \n                                    LiveCodingCodeFlowUtil.checkLoop(_coltb);\n                                      var p = params[i].split(\'=\');\n      paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\n    }\n  \n                                    LiveCodingCodeFlowUtil.checkLoop(\"\");\n                                  if (!paramMap.spec) \n  {\n    return true;\n  }\n  return spec.getFullName().indexOf(paramMap.spec) === 0;\n  \n                    } catch (e) {\n                        LogUtil.log(\"error\", \"\", \"\", \"spec\/lib\/jasmine-1.2.0\/jasmine-html.js\", \"live method spec\/lib\/jasmine-1.2.0\/jasmine-html.js[47]: function(spec) execute error: \" + e.message, e);\n                    } finally {\n                        LiveCodingCodeFlowUtil.checkRecursion2(\"spec\/lib\/jasmine-1.2.0\/jasmine-html.js[47]: function(spec)\");\n                    }\n                })")

LiveCodeRegistry.getInstance().setInspectables([],"spec/lib/jasmine-1.2.0/jasmine-html.js");
LiveCodeRegistry.getInstance().setLastLoadedPackage(0,"spec/lib/jasmine-1.2.0/jasmine-html.js");
jasmine.HtmlReporterHelpers = {};
jasmine.HtmlReporterHelpers.createDom = function(type, attrs, childrenVarArgs) {
  
                        var _coltc = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js0_" + __coltScope)
                        if (_coltc == null) {
                            try {
                                _coltc = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js0"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[0]: function(type, attrs, childrenVarArgs) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js0_" + __coltScope, _coltc)
                        }
                        return _coltc.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.getSpecStatus = function(child) {
  
                        var _coltd = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js1_" + __coltScope)
                        if (_coltd == null) {
                            try {
                                _coltd = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js1"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[1]: function(child) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js1_" + __coltScope, _coltd)
                        }
                        return _coltd.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.appendToSummary = function(child, childElement) {
  
                        var _colte = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js2_" + __coltScope)
                        if (_colte == null) {
                            try {
                                _colte = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js2"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[2]: function(child, childElement) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js2_" + __coltScope, _colte)
                        }
                        return _colte.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.addHelpers = function(ctor) {
  
                        var _coltf = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js3_" + __coltScope)
                        if (_coltf == null) {
                            try {
                                _coltf = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js3"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[3]: function(ctor) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js3_" + __coltScope, _coltf)
                        }
                        return _coltf.apply(this, arguments)
            };
jasmine.HtmlReporter = function(_doc) {
  
                        var _colt10 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js4_" + __coltScope)
                        if (_colt10 == null) {
                            try {
                                _colt10 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js4"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[4]: function(_doc) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js4_" + __coltScope, _colt10)
                        }
                        return _colt10.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter);
jasmine.HtmlReporter.ReporterView = function(dom) {
  
                        var _colt1b = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js15_" + __coltScope)
                        if (_colt1b == null) {
                            try {
                                _colt1b = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js15"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[15]: function(dom) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js15_" + __coltScope, _colt1b)
                        }
                        return _colt1b.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.ReporterView);
jasmine.HtmlReporter.SpecView = function(spec, dom, views) {
  
                        var _colt28 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js28_" + __coltScope)
                        if (_colt28 == null) {
                            try {
                                _colt28 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js28"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[28]: function(spec, dom, views) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js28_" + __coltScope, _colt28)
                        }
                        return _colt28.apply(this, arguments)
            };
jasmine.HtmlReporter.SpecView.prototype.status = function() {
  
                        var _colt29 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js29_" + __coltScope)
                        if (_colt29 == null) {
                            try {
                                _colt29 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js29"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[29]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js29_" + __coltScope, _colt29)
                        }
                        return _colt29.apply(this, arguments)
            };
jasmine.HtmlReporter.SpecView.prototype.refresh = function() {
  
                        var _colt2a = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js30_" + __coltScope)
                        if (_colt2a == null) {
                            try {
                                _colt2a = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js30"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[30]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js30_" + __coltScope, _colt2a)
                        }
                        return _colt2a.apply(this, arguments)
            };
jasmine.HtmlReporter.SpecView.prototype.appendSummaryToSuiteDiv = function() {
  
                        var _colt2b = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js31_" + __coltScope)
                        if (_colt2b == null) {
                            try {
                                _colt2b = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js31"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[31]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js31_" + __coltScope, _colt2b)
                        }
                        return _colt2b.apply(this, arguments)
            };
jasmine.HtmlReporter.SpecView.prototype.appendFailureDetail = function() {
  
                        var _colt2c = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js32_" + __coltScope)
                        if (_colt2c == null) {
                            try {
                                _colt2c = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js32"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[32]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js32_" + __coltScope, _colt2c)
                        }
                        return _colt2c.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SpecView);
jasmine.HtmlReporter.SuiteView = function(suite, dom, views) {
  
                        var _colt2d = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js33_" + __coltScope)
                        if (_colt2d == null) {
                            try {
                                _colt2d = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js33"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[33]: function(suite, dom, views) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js33_" + __coltScope, _colt2d)
                        }
                        return _colt2d.apply(this, arguments)
            };
jasmine.HtmlReporter.SuiteView.prototype.status = function() {
  
                        var _colt2e = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js34_" + __coltScope)
                        if (_colt2e == null) {
                            try {
                                _colt2e = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js34"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[34]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js34_" + __coltScope, _colt2e)
                        }
                        return _colt2e.apply(this, arguments)
            };
jasmine.HtmlReporter.SuiteView.prototype.refresh = function() {
  
                        var _colt2f = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js35_" + __coltScope)
                        if (_colt2f == null) {
                            try {
                                _colt2f = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js35"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[35]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js35_" + __coltScope, _colt2f)
                        }
                        return _colt2f.apply(this, arguments)
            };
jasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SuiteView);
jasmine.TrivialReporter = function(doc) {
  
                        var _colt30 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js36_" + __coltScope)
                        if (_colt30 == null) {
                            try {
                                _colt30 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js36"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[36]: function(doc) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js36_" + __coltScope, _colt30)
                        }
                        return _colt30.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.createDom = function(type, attrs, childrenVarArgs) {
  
                        var _colt31 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js37_" + __coltScope)
                        if (_colt31 == null) {
                            try {
                                _colt31 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js37"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[37]: function(type, attrs, childrenVarArgs) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js37_" + __coltScope, _colt31)
                        }
                        return _colt31.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.reportRunnerStarting = function(runner) {
  
                        var _colt32 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js38_" + __coltScope)
                        if (_colt32 == null) {
                            try {
                                _colt32 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js38"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[38]: function(runner) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js38_" + __coltScope, _colt32)
                        }
                        return _colt32.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.reportRunnerResults = function(runner) {
  
                        var _colt35 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js41_" + __coltScope)
                        if (_colt35 == null) {
                            try {
                                _colt35 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js41"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[41]: function(runner) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js41_" + __coltScope, _colt35)
                        }
                        return _colt35.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.reportSuiteResults = function(suite) {
  
                        var _colt36 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js42_" + __coltScope)
                        if (_colt36 == null) {
                            try {
                                _colt36 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js42"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[42]: function(suite) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js42_" + __coltScope, _colt36)
                        }
                        return _colt36.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.reportSpecStarting = function(spec) {
  
                        var _colt37 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js43_" + __coltScope)
                        if (_colt37 == null) {
                            try {
                                _colt37 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js43"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[43]: function(spec) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js43_" + __coltScope, _colt37)
                        }
                        return _colt37.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.reportSpecResults = function(spec) {
  
                        var _colt38 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js44_" + __coltScope)
                        if (_colt38 == null) {
                            try {
                                _colt38 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js44"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[44]: function(spec) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js44_" + __coltScope, _colt38)
                        }
                        return _colt38.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.log = function() {
  
                        var _colt39 = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js45_" + __coltScope)
                        if (_colt39 == null) {
                            try {
                                _colt39 = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js45"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[45]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js45_" + __coltScope, _colt39)
                        }
                        return _colt39.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.getLocation = function() {
  
                        var _colt3a = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js46_" + __coltScope)
                        if (_colt3a == null) {
                            try {
                                _colt3a = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js46"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[46]: function() execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js46_" + __coltScope, _colt3a)
                        }
                        return _colt3a.apply(this, arguments)
            };
jasmine.TrivialReporter.prototype.specFilter = function(spec) {
  
                        var _colt3b = LiveCodeRegistry.getInstance().getCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js47_" + __coltScope)
                        if (_colt3b == null) {
                            try {
                                _colt3b = eval(LiveCodeRegistry.getInstance().getMethod("spec/lib/jasmine-1.2.0/jasmine-html.js47"));
                            } catch (e) {
                                LogUtil.log("error", "", "", "spec/lib/jasmine-1.2.0/jasmine-html.js", "live method spec/lib/jasmine-1.2.0/jasmine-html.js[47]: function(spec) execute error: " + e.message, e);
                                return;
                            }
                            LiveCodeRegistry.getInstance().putCachedMethod("spec/lib/jasmine-1.2.0/jasmine-html.js47_" + __coltScope, _colt3b)
                        }
                        return _colt3b.apply(this, arguments)
            };
